package piccolo;

enum MessageTypes {
  MTYPE_RUN_KERNEL = 1;
  MTYPE_KERNEL_DONE = 2;
  
  MTYPE_PUT_REQUEST = 4;  
  
  MTYPE_GET = 5;
    
  MTYPE_WORKER_SHUTDOWN = 8;
  MTYPE_REGISTER_WORKER = 9;
  
  MTYPE_START_CHECKPOINT = 10;
  MTYPE_START_CHECKPOINT_ASYNC = 18;
  MTYPE_START_CHECKPOINT_DONE = 11;
  MTYPE_FINISH_CHECKPOINT = 12;
  MTYPE_FINISH_CHECKPOINT_ASYNC = 19;
  MTYPE_FINISH_CHECKPOINT_DONE = 13;
  
  MTYPE_RESTORE = 14;
  MTYPE_WORKER_FLUSH = 15;  
  MTYPE_SHARD_ASSIGNMENT = 17;

  MTYPE_ITERATOR = 20;

  MTYPE_SYNC_REPLY = 31;

  MTYPE_WORKER_APPLY = 33;
  MTYPE_WORKER_APPLY_DONE = 34;

  MTYPE_SWAP_TABLE = 35;  
  MTYPE_CLEAR_TABLE = 37;

  MTYPE_ENABLE_TRIGGER = 38;

  MTYPE_FLUSH_RESPONSE = 39;

  MTYPE_WORKER_FINALIZE = 40;
  MTYPE_WORKER_FINALIZE_DONE = 41;
};

message EmptyMessage {}

message Arg {
  required bytes key = 1;
  required bytes value = 2;
}

message Args {
  repeated Arg param = 1;
}

enum CompressionFormat {
  NONE = 0;
  LZO = 1;
  ZLIB = 2;
};

message FileParams {
  repeated Arg attr = 1;
  optional int32 compression = 2 [default=0];
}

message ConfigData {
  required int32 num_workers = 1;
  required int32 worker_id = 2;
  required int32 master_id = 3;
}
